# generate_token_metadata:
#   description: >
#     Given the trend "{keyword}" and reason "{why_trending}", create meme token metadata.
#     This includes a creative name, an all-uppercase symbol (3–6 letters), and a brief, witty description
#     connecting the trend to meme culture.
#     The name should be catchy or playful, and the description should highlight why this token exists.
#     Return the result as a JSON object in context for the next task without saving it to a file.
#   expected_output: >
#     A JSON object with the following structure:
#     {
#       "name": "<Token Name>",
#       "symbol": "<SYMBOL>",
#       "description": "<Witty, concise token description>"
#     }
#   agent: token_meta_generator

collect_news_url:
  description: >
    Based on the given keyword '{keyword}' and the reason it is trending '{why_trending}', you need to find the most accurate and relevant latest Korean news articles.
    Instead of simply searching with the keyword, use the following search strategy to improve quality:
    -	Target specific news portals: Search directly on trusted major portals such as
      "{keyword}" site:news.naver.com or "{keyword}" site:v.daum.net.
    -	Context-based search: Extract key terms from the trending reason and combine them with the keyword.
      Example: "{keyword}"
    - Latest keyword search: Combine with terms like "{keyword}" latest news or "{keyword}" official statement to ensure the most recent updates.

    Using these strategies together, find 3–5 reliable and up-to-date articles. Collect the title, URL, and a short summary for each.

    The result must be structured in the following JSON format:
      {
        "keyword": "{keyword}",
        "articles": [
            {
                "title": "Article Title",
                "url": "Article URL",
                "snippet": "Article summary",
                "source": "News outlet"
            }
        ]
    }
  expected_output: >
    A JSON-formatted string containing information on 5 to 7 reliable, recent articles.
  agent: news_url_collector

extract_main_article:
  description: >
    From the previously collected article URLs, extract the main article content.

    Extraction requirements:
      1.	Access each URL and extract the article body.
      2.	Focus on the title and the key information from the first 2–3 paragraphs.
      3.	Exclude ads, related articles, comments, and irrelevant content.
      4.	Summarize only the essential facts and contextual information.
      5.	Clearly identify the background of the issue and the current situation.

    Format the results as follows:
      {
          "extracted_content": [
              {
                  "title": "Article Title",
                  "content": "Extracted key content",
                  "key_points": ["Key point 1", "Key point 2", "Key point 3"],
                  "background": "Issue background"
              }
          ]
      }

  expected_output: >
    Extracted article texts in JSON format
  agent: article_extractor
  context:
    - collect_news_url

write_satire:
  description: >
    Write a satirical English meme coin article based on the information collected for the keyword '{keyword}'.  
              
    Satire requirements:  
      1. title: creative meme coin name and ticker ex) Sonnywood, $SONNY   
      2. body: a funny English description of the issue (100-250 words)
      3. features: 1-4 humorous features of the meme coin in question (in English)
      4. caveats: satirical investment advice and disclaimers (in English)
      5. hashtags: 5-7 relevant English hashtags

    Tone & Manners:
      - Humorous but classy
      - Use English that a global audience can understand
      - Use emojis appropriately
      - Mix in irony and sarcasm. Utilize hyperbole, analogies, puns, etc.
      - Explain the Korean cultural context well in English
      - Communicate unfamiliar Korean issues in an understandable way

    ⚠️ Important: Write everything in English.

    Writing format:
      🚀 [COIN_NAME] Emergency Launch! 
              
      "[English Catchphrase]"
      
      [Korean issue explained in English with humor]
      
      ✨ Features:
      - Feature 1 in English
      - Feature 2 in English
      - Feature 3 in English
      
      ⚠️ Investment Warning: 
      [Disclaimer in English about this being entertainment only]
      
      #hashtag1 #hashtag2 #hashtag3 #hashtag4 #hashtag5

      Writing Guide (Few Shots):
        Below is an example of a successful satirical piece written on the topic of "Actors' Private Lives Cannot Be Verified."
        Learn from the creative approach used in this example and apply it to your own work.

      Topic: Actor Jung Woo-sung(정우성)'s official statement that "it is impossible to confirm his private life"
      
      Excellent Features Writing Example:
      ✨ Features:
        - Non-Denial-Denial Protocol: Transactions are never officially confirmed, they just appear on the blockchain. We respect their privacy.
        - Plot Twist Burn Mechanism: A small percentage of the total supply is automatically burned every time a shocking new personal detail about a major public figure is "unable to be confirmed."
        - Stealth Wedding Rewards: Holders are airdropped bonus tokens when a long-term bachelor/bachelorette finally—and quietly—gets married without a press release.


      Key learning points: Do not simply follow the examples above.
      Instead, your task is to maximize humor by cleverly packaging the core concepts of satire using plausible blockchain-related technical terms such as "Protocol," "Mechanism," "Rewards," "Tokenomics," and "Governance." Select the terms that best fit the topic creatively.
      For example, when satirizing politicians, Governance Model or Voting System might be more appropriate, while Supply Chain Tokenomics could be more entertaining for food-related issues.

      Good Investment Warning Example:
        ⚠️ A Note From Our Legal Team (Probably):
        Look, this is an emotional support token, not a financial instrument. Our entire whitepaper is a rumor someone started in a group chat. The liquidity pool is filled with pure, unadulterated speculation. Any resemblance to actual persons, living or dead, or actual events is purely coincidental and, frankly, a matter of their private life we cannot confirm. Buying this token will not make you rich, but it might make you laugh while you lose money on other, more serious-looking coins. This is not financial advice. This is performance art. DYOR (Do Your Own Research... on everything).

      Key learning point: Do not follow the above example exactly.
      However, we recommend the strategy of writing the entire warning message as if you were a meme coin developer, pretending to warn people while continuing with humorous satire.

  expected_output: >
    Completed English meme coin satire
  agent: satirist
  context:
    - extract_main_article

# write_website_contents:
#   description: >
#     '{keyword}' generated in the previous step (context) Create a talkonomics and roadmap based on the memecoin satire.

#     Your most important task is to maintain consistency.
#     The `✨Features` items presented in the introduction of the satire, **must** be taken and elaborated on in the `Special Features` section of `TOKENOMICS` that you will write.** Never ignore those ideas and create new mechanisms.

#     💡 **Workflow Guide (Your Workflow):** 1.
#     1. carefully read the `✨ Features` section of the satire you received as context.
#     2. Use the names of the features as the title of the `Special Features` section of `TOKENOMICS` that you will write.
#     3. Be creative and fun in explaining how each feature works specifically from a Tokenomics perspective (e.g., staking, burning, rewards, etc.).
#     4. If you want to add a new mechanic that wasn't in the satire (e.g. general burning), it's okay to do so **after** you've described all the existing features.


#     📊 tokenomics requirements:
#     1. Total Supply: A ridiculous number (e.g. 420.69 trillion)
#     2. Distribution:
#     - Team: X% (with a ridiculous reason)
#     - Marketing: X% (with a ridiculous marketing plan)
#     - Liquidity: X 
#     - Community: X% (with ridiculous community benefits)
#     3. Special Features:
#     **(required) Specifically describe ideas taken from the `✨Features` in the satire article**.
        
#     🗺️ ROADMAP Requirements:
#     Q1 2025: [Goal that sounds like a lie, but is slightly realistic]
#     Q2 2025: [Goal that sounds so ridiculous it's almost impossible]
#     Q3 2025: [Completely impossible goal that violates the laws of physics]
#     Q4 2025: [Space conquest/time travel level goal].
        
#     Format:
#     📊 TOKENOMICS
#     ================
#     Total Supply: [Number].
        
#     Distribution:
#     - Team: X% - [funny description].
#     - Marketing: X% - [ridiculous plan]
#     - Liquidity: X% - [Exaggerated explanation].
#     - Community: X% - [Ridiculous benefits].

#     Special Features:
#     - [Specifically describe ideas taken from the satire's `✨ Features`]
#     - [Specifically describe ideas taken from the satirical `✨ Features`]
#     - [Specifically describe the ideas taken from the `✨ Features` in the satire]]

#     🗺️ ROADMAP TO THE MOON (AND BEYOND)
#     =====================================
#     Q1 2025: [goals]
#     Q2 2025: [goals]
#     Q3 2025: [goals]
#     Q4 2025: [goals]

#     ⚠️ Write everything in English, be funny with a serious tone, and write in a similar style to the satire created in the previous step.
#     Pretend this is an official whitepaper presented to serious investors, but the content is absurd. Never break character.
#   expected_output: >
#     A complete report including talkonomics and roadmaps
#   agent: website_contents_writer

convert_json:
  description: >
    Convert all the information generated in the previous step (satire) into a JSON format

    JSON structure requirements:
    {
      "name": "Memecoin full name",
      "symbol": "Memecoin ticker",
      "description": "Body description",
      "features": ["feature1", "feature2", "feature3"],
      "warning": "Investment warning",
      "hashtags": ["hashtag1", "hashtag2", "hashtag3"],
    }

    Notes:
    1. keep all text in English
    2. format the JSON exactly
    3. keep special characters or emojis, but process them so that they don't cause problems in the JSON
    4. categorize and lay out the content of each section correctly
    5. save metadata.json in output/
  expected_output: >
    JSON data and JSON file
  agent: json_converter
  context:
    - write_satire
# generate_image_prompt:
#   description: >
#     Given the trend "{keyword}" and reason "{why_trending}", write a vivid and specific image generation prompt suitable for DALL·E, Midjourney, or other visual AI models.

#     The prompt must follow these core principles:

#     1. **ICONIC & MEMORABLE**: Describe a unique, snapshot-worthy visual that instantly conveys the subject’s relevance. Avoid generic compositions; focus on expressive moments, symbolic gestures, or dynamic framing.

#     2. **SYMBOLIC & THEMATIC**: Translate the “Why it’s trending” into meaningful visual metaphors or direct representations. Every element should reinforce the core theme or emotional resonance. Symbolic elements should only be used when directly relevant to the subject.

#     3. **STYLISTIC PRECISION**: Clearly state the desired artistic style (e.g., “photo-realistic”, “hyper-realistic cinematic render”, “digital pop-art”). Include lighting details (e.g., “golden hour glow”, “dramatic spotlight”), color palette (e.g., “team colors”, “ethereal pastels”), and overall atmosphere (e.g., “triumphant”, “reflective”, “urgent”).
#        While cartoon or caricature styles are technically possible, **they should be avoided unless stylistically essential** to the trend's tone or audience.

#     4. **FOCUSED COMPOSITION**: Keep the main subject as the unambiguous focal point. Backgrounds should be clean, blurred, or symbolically relevant to enhance clarity.

#     5. **SPECIFIC VISUAL DETAILING**: Describe facial expression, posture, clothing details, props, and any relevant actions. Avoid vague descriptors.

#     6. **TECHNICAL CONTROL**:
#        - Append this negative prompt to filter undesirable outputs:
#          `Negative prompt: blurry, text, low quality, deformed, bad anatomy, generic, watermark, oversaturated, unrealistic`

#     7. **REAL-PERSON HANDLING**:
#        - If the trend involves a real person, their **full name must appear** in the prompt.
#        - Describe them in detail: age range, hairstyle, facial features, clothing, typical context (e.g., stadium, press conference), and any signature accessories or gestures.
#        - **Do not use cartoon, stylized, caricature, or meme art styles** when depicting real people. Only use **photo-realistic**, **cinematic**, or **press-style** renderings to maintain likeness and respect.

#     Additional guideline:
#     Use grounded and literal imagery. Avoid metaphorical or symbolic language unless it is directly relevant to the trend itself. Make the scene visually intentional by specifying the setting, background elements, mood, lighting, and overall atmosphere to create a vivid and unambiguous mental image.

#     Return the generated prompt directly in context for the next task without saving it to a file.
#   expected_output: >
#     "<Single English paragraph image prompt>"

#   agent: visual_prompt_generator

# generate_image_from_file:
#   description: >
#     Use the image prompt from context to generate an image with DALL·E via the DalleTool.
#     Once the image is generated and the URL is available, use it to download and save the image
#     to 'output/meme_deployer/images/token_image.png'.
#   expected_output: >
#     Final saved image confirmation message, e.g. "Image saved to output/meme_deployer/images/token_image.png"
#   agent: image_generator

# assemble_metadata:
#   description: >
#     Use the meme token metadata from context (fields: name, symbol, description)
#     and combine it with the fixed image path 'output/meme_deployer/images/token_image.png'.

#     Create a Python dictionary named `final_token_metadata` with the structure:

#     final_token_metadata = {
#       "name": "...",
#       "symbol": "...",
#       "description": "...",
#       "image_path": "output/meme_deployer/images/token_image.png"
#     }

#     Save this dictionary into a Python file located at 'output/meme_deployer/final_token_metadata.py'.
#   expected_output: >
#     output/meme_deployer/final_token_metadata.py
#   agent: metadata_assembler
