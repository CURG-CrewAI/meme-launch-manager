collect_namunews_trending:
  description: >
    Visit the Namunews website (https://namu.news/) and extract keywords currently trending in real time from its dedicated trending section.
    If a clearly defined section cannot be found, identify and collect keywords that are likely trending.
    Return the extracted results as a JSON array in rank order without saving to a file.
  expected_output: >
    JSON array containing the current trending keywords from Namunews,
    ordered by rank (e.g., ["Keyword1", "Keyword2", "Keyword3", ...]).
  agent: namunews_trending_scraper

# collect_signal_trending:
#   description: >
#     Scrape only the child elements that appear to be real-time trending in the real-time trend area (<section class="container">)
#     from the Signal site (https://signal.bz/) and return the extracted results as a JSON array in rank order without saving to a file.
#     If the area does not exist, freely extract what appears to be real-time trending keywords.
#   expected_output: >
#     JSON array containing the current trending keywords from signal,
#     ordered by rank (e.g., ["Keyword1", "Keyword2", "Keyword3", ...]).
#   agent: signal_trending_scraper

collect_x_trending:
  description: >
    From getdaytrends (https://getdaytrends.com/ko/korea/), a site that shows X (Twitter) trends,
    extract keywords from the area containing X trend keywords (<div id="trends">).
    Extract not only current trends but also all keywords from the past 24 hours.
    Return the extracted results as a JSON array in rank order without saving to a file.
    If the area does not exist, freely extract what appears to be real-time trending keywords. (X is the same site as Twitter.)
  expected_output: >
    JSON array of current and past 24h trending keywords from X
    ordered by rank. (e.g., ["Keyword1", "Keyword2", "Keyword3", ...]).
  agent: x_trending_crawler

collect_google_trending:
  description: >
    From Google Trends (e.g., https://trends.google.com/trending?geo=KR&hours=24),
    scrape only the child elements that appear to be real-time trending in the area (<table class="enOdEe-wZVHld-zg7Cn">).
    Return the extracted results as a JSON array in rank order without saving to a file.
    If the area does not exist, freely extract what appears to be real-time trending keywords.
  expected_output: >
    JSON array of the current trending keywords from Google Trends,
    ordered by rank.(e.g., ["Keyword1", "Keyword2", "Keyword3", ...]).
  agent: google_trending_scraper

organize_trending:
  description: >
    Gather the trend keyword JSON arrays from context (results of Namunews, X, Google, and Signal scrapers)
    and combine them into a single JSON object grouped by source.
    Each key in the JSON object should be the service name (e.g., "namunews", "x", "google", "signal")
    and the value should be an array of keywords in order of ranking.
    Save this combined object to `output/trending_scraper/scrapped_site.json` and also return it as context for the next task.
  expected_output: >
    A JSON object structured as:
    {
      "namunews": ["정우성", "시드니", "안우진", ...],
      "x": ["안우진", "정우성", "손흥민", ...],
      "google": ["정우성", "민생지원금", "손흥민", ...],
      "signal": ["시드니", "손흥민", "정우성", ...]
    }
  agent: trending_organizer

cross_validate_trending:
  description: >
    Analyze the organized trend keyword data from context (output of `organize_trending`) that contains keyword arrays
    for each service (Namunews, X, Google, Signal).
    Identify the Top 5 keywords that appear most frequently across multiple services.
    Sort these keywords by the number of mentions in descending order.
    If two or more keywords have the same number of mentions, maintain their relative order from the original lists.

    If there are fewer than 5 keywords that appear across multiple services (due to lack of overlaps),
    fill the remaining slots by taking keywords from the Namunews list in order of appearance until the list has exactly 5 items.

    Return the results as a JSON array where each item is an object with a "keyword" key, without saving to a file.
  expected_output: >
    JSON array containing exactly 5 items, each in the format:
    [
      {"keyword": "정우성"},
      {"keyword": "안우진"},
      {"keyword": "시드니"},
      {"keyword": "손흥민"},
      {"keyword": "민생지원금"}
    ]
  agent: cross_validation_agent

explain_trends:
  description: >
    Receive the top 5 trending keywords as context (output of `cross_validate_trending`).
    Perform real-time web research for each keyword and return a JSON array where each item is an object containing:
      - "keyword": the keyword string
      - "why_trending": a concise explanation in English
    The explanation must be based on the most recent and relevant information.

    Save the JSON array to `output/trending_scraper/trends.json` (overwrite if exists).
    Return exactly the same JSON array as the final output.

  expected_output: >
    A valid JSON array, exactly in this format:
    [
      {"keyword": "정우성", "why_trending": "Marriage rumors sparked discussions."},
      {"keyword": "안우진", "why_trending": "Shoulder injury during military service raised concerns."},
      {"keyword": "시드니", "why_trending": "Advertising slogan controversy sparked debates."},
      {"keyword": "손흥민", "why_trending": "Praised for recent performance and interviews."},
      {"keyword": "민생지원금", "why_trending": "Government's new financial aid announcement."}
    ]
    Do not include any text or explanation outside this JSON.
  agent: trend_explainer
