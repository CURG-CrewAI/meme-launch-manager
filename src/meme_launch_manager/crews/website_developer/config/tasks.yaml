extract_token_moods:
  description: >
    Primary Input (from context): {token_meta}

    Task:
      - Use the provided {token_meta} (name, symbol, description) from context
      - Analyze the description to extract 5–10 diverse mood/style keywords in English
      - Ensure keywords reflect different style spectrums (energetic vs calm, modern vs retro, minimal vs bold, playful vs elegant)
      - Save the structured result into 'output/moods/token_mood.json' (for persistence)
      - Also RETURN the JSON so the next task can use it from context

    Constraints:
      - Do not produce synonyms or repetitive terms
      - Do not allow keywords to cluster around a single style axis
      - Output must be strict JSON object with shape:
        {"name":..., "symbol":..., "mood_keywords":[...]}

  expected_output: >
    - Writes 'output/moods/token_mood.json'
    - Returns {"name","symbol","mood_keywords":[...]} in task output

  output_key: token_mood
  agent: meme_mood_curator

write_website_contents:
  description: >
    Create a tokeonomics and roadmap based on the {token_meta}.

    Your most important task is to maintain consistency.
    The `✨Features` items presented in {token_meta}, **must** be taken and elaborated on in the `Special Features` section of `TOKENOMICS` that you will write.** Never ignore those ideas and create new mechanisms.

    💡 **Workflow Guide (Your Workflow):** 1.
    1. carefully read the `✨ Features` section of the satire you received as {token_meta}.
    2. Use the names of the features as the title of the `Special Features` section of `TOKENOMICS` that you will write.
    3. Be creative and fun in explaining how each feature works specifically from a Tokenomics perspective (e.g., staking, burning, rewards, etc.).
    4. If you want to add a new mechanic that wasn't in the satire (e.g. general burning), it's okay to do so **after** you've described all the existing features.


    📊 tokenomics requirements:
    1. Total Supply: A ridiculous number (e.g. 420.69 trillion)
    2. Distribution:
    - Team: X% (with a ridiculous reason)
    - Marketing: X% (with a ridiculous marketing plan)
    - Liquidity: X 
    - Community: X% (with ridiculous community benefits)
    3. Special Features:
    **(required) Specifically describe ideas taken from the `✨Features` in the satire article**.
        
    🗺️ ROADMAP Requirements:
    Q1 2025: [Goal that sounds like a lie, but is slightly realistic]
    Q2 2025: [Goal that sounds so ridiculous it's almost impossible]
    Q3 2025: [Completely impossible goal that violates the laws of physics]
    Q4 2025: [Space conquest/time travel level goal].
        
    Format:
    📊 TOKENOMICS
    ================
    Total Supply: [Number].
        
    Distribution:
    - Team: X% - [funny description].
    - Marketing: X% - [ridiculous plan]
    - Liquidity: X% - [Exaggerated explanation].
    - Community: X% - [Ridiculous benefits].

    Special Features:
    - [Specifically describe ideas taken from the satire's `✨ Features`]
    - [Specifically describe ideas taken from the satirical `✨ Features`]
    - [Specifically describe the ideas taken from the `✨ Features` in the satire]]

    🗺️ ROADMAP TO THE MOON (AND BEYOND)
    =====================================
    Q1 2025: [goals]
    Q2 2025: [goals]
    Q3 2025: [goals]
    Q4 2025: [goals]

    ⚠️ Important: Write everything in English, be funny with a serious tone, and write in a similar style to the satire created in the previous step.
                  Pretend this is an official whitepaper presented to serious investors, but the content is absurd. Never break character. 
                  Have to write 'output/site/website_contents.txt'

  expected_output: >
    A complete report including talkonomics and roadmaps
    Writes 'output/site/website_contents.txt'
  agent: website_contents_writer

select_layout_palette:
  description: >
    Primary Input (from context): token_mood

    Fallback (only if context missing): read from
    - 'output/moods/token_mood.json'

    Task:
      - Read token_mood (keywords or description) from context
      - Select exactly ONE layout and ONE palette that best match, from the fixed lists below
      - Save the results into 'output/moods/selected_designs.json' (for persistence)
      - Also RETURN the JSON array so the next task can use it from context

    Rules:
      - You must select only from the provided lists (no new names)
      - Output must be strict JSON array with no extra text, comments, or formatting
      - For the same input, the selection must remain consistent (deterministic)

    AVAILABLE LAYOUTS:
      - Floating Island
      - Split Screen Chaos
      - Cyber Terminal
      - Retro Arcade
      - Minimal Meme
      - Party Chaos
      - Galaxy Rise
      - Brain Spectrum
      - Victory Rush
      - Gothic Shadows
      - Idol Glow
      - Protest Pulse

    AVAILABLE PALETTES:
      - Dreamy Pastel
      - Chaos Pop
      - Emoji Rainbow
      - Cyber Hack
      - Retro Night
      - Pink Pixel
      - Soft Minimal
      - Utility Gray
      - Default Blue
      - Galactic Neon
      - Ancient Scroll
      - Terminal Dark
      - Alpha Gains
      - Speed Blaze
      - Art Pop
      - Golden Meme
      - Gothic Noir
      - Idol Neon

    Output format (example):
      [
        {"name":"YoonAmnestyCoin","symbol":"YAMC","layout":"Left Brain Logic","palette":"Utility Gray"}
      ]

  expected_output: >
    - Writes 'output/moods/selected_designs.json'
    - Returns [{"name","symbol","layout","palette"}] in task output

  output_key: selected_designs
  agent: design_recommender
  context:
    - extract_token_moods

build_meme_token_sites:
  description: >
    Primary Inputs (from context): select_layout_palette , write_website_contents

    Task:
      - Use the layout & palette specified in selected_designs **exactly as given**
      - Generate the HTML landing page using TailwindCSS and Google Fonts, applying:
        - section order
        - hero alignment
        - logo position
        - font style
        - button style
        - animation style
        - color palette (background color, primary/secondary colors, text color)
      - Save the site to 'output/site/index.html'
      - Create 'output/site/DESIGN_RATIONALE.md' in Korean including:
        - name, symbol, mood_keywords
        - chosen layout & palette (summarized properties)
        - mapping of mood_keywords ↔ layout/palette (if indirect, explain by semantic similarity)
        - explanation of why this design fits the community vibe (5–8 sentences, Korean)
        - 1–2 alternative layout/palette options considered and reasons for rejection (2–4 sentences, Korean)
      - In index.html, include the logo with:
        <img src="images/token_image.png" alt="site logo">

    Constraints:
      - Do NOT re-select or change the layout/palette
      - HTML must implement: section order, hero alignment, logo position, font style,
        button style, animation style, and palette colors exactly

  expected_output: >
    1) A styled landing page at 'output/site/index.html'
    2) A Korean rationale document at 'output/site/DESIGN_RATIONALE.md'

  agent: meme_token_site_designer
  context:
    - select_layout_palette
    - write_website_contents
